/* This file was generated by generate-wire.py */
/* Do not modify this file! Modify the _csv file it was generated from. */
/* Original template can be found at tools/gen/header_template */

#ifndef LIGHTNING_GOSSIPD_GEN_GOSSIP_WIRE_H
#define LIGHTNING_GOSSIPD_GEN_GOSSIP_WIRE_H
#include <ccan/tal/tal.h>
#include <wire/tlvstream.h>
#include <wire/wire.h>
#include <common/cryptomsg.h>
#include <common/wireaddr.h>
#include <wire/gen_onion_wire.h>
#include <lightningd/gossip_msg.h>
#include <common/bolt11.h>

enum gossip_wire_type {
        /*  Initialize the gossip daemon. */
        WIRE_GOSSIPCTL_INIT = 3000,
        /*  In developer mode */
        WIRE_GOSSIP_DEV_SET_TIME = 3001,
        /*  Pass JSON-RPC getnodes call through */
        WIRE_GOSSIP_GETNODES_REQUEST = 3005,
        WIRE_GOSSIP_GETNODES_REPLY = 3105,
        /*  Pass JSON-RPC getroute call through */
        WIRE_GOSSIP_GETROUTE_REQUEST = 3006,
        WIRE_GOSSIP_GETROUTE_REPLY = 3106,
        WIRE_GOSSIP_GETCHANNELS_REQUEST = 3007,
        WIRE_GOSSIP_GETCHANNELS_REPLY = 3107,
        /*  Ping/pong test.  Waits for a reply if it expects one. */
        WIRE_GOSSIP_PING = 3008,
        WIRE_GOSSIP_PING_REPLY = 3108,
        /*  Set artificial maximum reply_channel_range size.  Master->gossipd */
        WIRE_GOSSIP_DEV_SET_MAX_SCIDS_ENCODE_SIZE = 3030,
        /*  Given a short_channel_id */
        WIRE_GOSSIP_GET_CHANNEL_PEER = 3009,
        WIRE_GOSSIP_GET_CHANNEL_PEER_REPLY = 3109,
        /*  gossipd->master: we're closing this channel. */
        WIRE_GOSSIP_LOCAL_CHANNEL_CLOSE = 3027,
        /*  Gossipd->master get this tx output please. */
        WIRE_GOSSIP_GET_TXOUT = 3018,
        /*  master->gossipd here is the output */
        WIRE_GOSSIP_GET_TXOUT_REPLY = 3118,
        /*  master->gossipd an htlc failed with this onion error. */
        WIRE_GOSSIP_PAYMENT_FAILURE = 3021,
        /*  master -> gossipd: a potential funding outpoint was spent */
        WIRE_GOSSIP_OUTPOINT_SPENT = 3024,
        /*  master -> gossipd: stop gossip timers. */
        WIRE_GOSSIP_DEV_SUPPRESS = 3032,
        /*  master -> gossipd: do you have a memleak? */
        WIRE_GOSSIP_DEV_MEMLEAK = 3033,
        WIRE_GOSSIP_DEV_MEMLEAK_REPLY = 3133,
        /*  master -> gossipd: please rewrite the gossip_store */
        WIRE_GOSSIP_DEV_COMPACT_STORE = 3034,
        /*  gossipd -> master: ok */
        WIRE_GOSSIP_DEV_COMPACT_STORE_REPLY = 3134,
        /*  master -> gossipd: get route_info for our incoming channels */
        WIRE_GOSSIP_GET_INCOMING_CHANNELS = 3025,
        /*  gossipd -> master: here they are. */
        WIRE_GOSSIP_GET_INCOMING_CHANNELS_REPLY = 3125,
        /*  master -> gossipd: blockheight increased. */
        WIRE_GOSSIP_NEW_BLOCKHEIGHT = 3026,
};

const char *gossip_wire_type_name(int e);


/* WIRE: GOSSIPCTL_INIT */
/*  Initialize the gossip daemon. */
u8 *towire_gossipctl_init(const tal_t *ctx, const struct chainparams *chainparams, const struct node_id *id, const u8 *globalfeatures, const u8 rgb[3], const u8 alias[32], const struct wireaddr *announcable, u32 *dev_gossip_time, bool dev_fast_gossip, bool dev_fast_gossip_prune);
bool fromwire_gossipctl_init(const tal_t *ctx, const void *p, const struct chainparams **chainparams, struct node_id *id, u8 **globalfeatures, u8 rgb[3], u8 alias[32], struct wireaddr **announcable, u32 **dev_gossip_time, bool *dev_fast_gossip, bool *dev_fast_gossip_prune);

/* WIRE: GOSSIP_DEV_SET_TIME */
/*  In developer mode */
u8 *towire_gossip_dev_set_time(const tal_t *ctx, u32 dev_gossip_time);
bool fromwire_gossip_dev_set_time(const void *p, u32 *dev_gossip_time);

/* WIRE: GOSSIP_GETNODES_REQUEST */
/*  Pass JSON-RPC getnodes call through */
u8 *towire_gossip_getnodes_request(const tal_t *ctx, const struct node_id *id);
bool fromwire_gossip_getnodes_request(const tal_t *ctx, const void *p, struct node_id **id);

/* WIRE: GOSSIP_GETNODES_REPLY */
u8 *towire_gossip_getnodes_reply(const tal_t *ctx, const struct gossip_getnodes_entry **nodes);
bool fromwire_gossip_getnodes_reply(const tal_t *ctx, const void *p, struct gossip_getnodes_entry ***nodes);

/* WIRE: GOSSIP_GETROUTE_REQUEST */
/*  Pass JSON-RPC getroute call through */
u8 *towire_gossip_getroute_request(const tal_t *ctx, const struct node_id *source, const struct node_id *destination, struct amount_msat msatoshi, u64 riskfactor_by_million, u32 final_cltv, const double *fuzz, const struct exclude_entry **excluded, u32 max_hops);
bool fromwire_gossip_getroute_request(const tal_t *ctx, const void *p, struct node_id **source, struct node_id *destination, struct amount_msat *msatoshi, u64 *riskfactor_by_million, u32 *final_cltv, double *fuzz, struct exclude_entry ***excluded, u32 *max_hops);

/* WIRE: GOSSIP_GETROUTE_REPLY */
u8 *towire_gossip_getroute_reply(const tal_t *ctx, const struct route_hop *hops);
bool fromwire_gossip_getroute_reply(const tal_t *ctx, const void *p, struct route_hop **hops);

/* WIRE: GOSSIP_GETCHANNELS_REQUEST */
u8 *towire_gossip_getchannels_request(const tal_t *ctx, const struct short_channel_id *short_channel_id, const struct node_id *source, const struct short_channel_id *prev);
bool fromwire_gossip_getchannels_request(const tal_t *ctx, const void *p, struct short_channel_id **short_channel_id, struct node_id **source, struct short_channel_id **prev);

/* WIRE: GOSSIP_GETCHANNELS_REPLY */
u8 *towire_gossip_getchannels_reply(const tal_t *ctx, bool complete, const struct gossip_getchannels_entry **nodes);
bool fromwire_gossip_getchannels_reply(const tal_t *ctx, const void *p, bool *complete, struct gossip_getchannels_entry ***nodes);

/* WIRE: GOSSIP_PING */
/*  Ping/pong test.  Waits for a reply if it expects one. */
u8 *towire_gossip_ping(const tal_t *ctx, const struct node_id *id, u16 num_pong_bytes, u16 len);
bool fromwire_gossip_ping(const void *p, struct node_id *id, u16 *num_pong_bytes, u16 *len);

/* WIRE: GOSSIP_PING_REPLY */
u8 *towire_gossip_ping_reply(const tal_t *ctx, const struct node_id *id, bool sent, u16 totlen);
bool fromwire_gossip_ping_reply(const void *p, struct node_id *id, bool *sent, u16 *totlen);

/* WIRE: GOSSIP_DEV_SET_MAX_SCIDS_ENCODE_SIZE */
/*  Set artificial maximum reply_channel_range size.  Master->gossipd */
u8 *towire_gossip_dev_set_max_scids_encode_size(const tal_t *ctx, u32 max);
bool fromwire_gossip_dev_set_max_scids_encode_size(const void *p, u32 *max);

/* WIRE: GOSSIP_GET_CHANNEL_PEER */
/*  Given a short_channel_id */
u8 *towire_gossip_get_channel_peer(const tal_t *ctx, const struct short_channel_id *channel_id);
bool fromwire_gossip_get_channel_peer(const void *p, struct short_channel_id *channel_id);

/* WIRE: GOSSIP_GET_CHANNEL_PEER_REPLY */
u8 *towire_gossip_get_channel_peer_reply(const tal_t *ctx, const struct node_id *peer_id);
bool fromwire_gossip_get_channel_peer_reply(const tal_t *ctx, const void *p, struct node_id **peer_id);

/* WIRE: GOSSIP_LOCAL_CHANNEL_CLOSE */
/*  gossipd->master: we're closing this channel. */
u8 *towire_gossip_local_channel_close(const tal_t *ctx, const struct short_channel_id *short_channel_id);
bool fromwire_gossip_local_channel_close(const void *p, struct short_channel_id *short_channel_id);

/* WIRE: GOSSIP_GET_TXOUT */
/*  Gossipd->master get this tx output please. */
u8 *towire_gossip_get_txout(const tal_t *ctx, const struct short_channel_id *short_channel_id);
bool fromwire_gossip_get_txout(const void *p, struct short_channel_id *short_channel_id);

/* WIRE: GOSSIP_GET_TXOUT_REPLY */
/*  master->gossipd here is the output */
u8 *towire_gossip_get_txout_reply(const tal_t *ctx, const struct short_channel_id *short_channel_id, struct amount_sat satoshis, const u8 *outscript);
bool fromwire_gossip_get_txout_reply(const tal_t *ctx, const void *p, struct short_channel_id *short_channel_id, struct amount_sat *satoshis, u8 **outscript);

/* WIRE: GOSSIP_PAYMENT_FAILURE */
/*  master->gossipd an htlc failed with this onion error. */
u8 *towire_gossip_payment_failure(const tal_t *ctx, const struct node_id *erring_node, const struct short_channel_id *erring_channel, u8 erring_channel_direction, const u8 *error);
bool fromwire_gossip_payment_failure(const tal_t *ctx, const void *p, struct node_id *erring_node, struct short_channel_id *erring_channel, u8 *erring_channel_direction, u8 **error);

/* WIRE: GOSSIP_OUTPOINT_SPENT */
/*  master -> gossipd: a potential funding outpoint was spent */
u8 *towire_gossip_outpoint_spent(const tal_t *ctx, const struct short_channel_id *short_channel_id);
bool fromwire_gossip_outpoint_spent(const void *p, struct short_channel_id *short_channel_id);

/* WIRE: GOSSIP_DEV_SUPPRESS */
/*  master -> gossipd: stop gossip timers. */
u8 *towire_gossip_dev_suppress(const tal_t *ctx);
bool fromwire_gossip_dev_suppress(const void *p);

/* WIRE: GOSSIP_DEV_MEMLEAK */
/*  master -> gossipd: do you have a memleak? */
u8 *towire_gossip_dev_memleak(const tal_t *ctx);
bool fromwire_gossip_dev_memleak(const void *p);

/* WIRE: GOSSIP_DEV_MEMLEAK_REPLY */
u8 *towire_gossip_dev_memleak_reply(const tal_t *ctx, bool leak);
bool fromwire_gossip_dev_memleak_reply(const void *p, bool *leak);

/* WIRE: GOSSIP_DEV_COMPACT_STORE */
/*  master -> gossipd: please rewrite the gossip_store */
u8 *towire_gossip_dev_compact_store(const tal_t *ctx);
bool fromwire_gossip_dev_compact_store(const void *p);

/* WIRE: GOSSIP_DEV_COMPACT_STORE_REPLY */
/*  gossipd -> master: ok */
u8 *towire_gossip_dev_compact_store_reply(const tal_t *ctx, bool success);
bool fromwire_gossip_dev_compact_store_reply(const void *p, bool *success);

/* WIRE: GOSSIP_GET_INCOMING_CHANNELS */
/*  master -> gossipd: get route_info for our incoming channels */
u8 *towire_gossip_get_incoming_channels(const tal_t *ctx, bool *private_too);
bool fromwire_gossip_get_incoming_channels(const tal_t *ctx, const void *p, bool **private_too);

/* WIRE: GOSSIP_GET_INCOMING_CHANNELS_REPLY */
/*  gossipd -> master: here they are. */
u8 *towire_gossip_get_incoming_channels_reply(const tal_t *ctx, const struct route_info *route_info);
bool fromwire_gossip_get_incoming_channels_reply(const tal_t *ctx, const void *p, struct route_info **route_info);

/* WIRE: GOSSIP_NEW_BLOCKHEIGHT */
/*  master -> gossipd: blockheight increased. */
u8 *towire_gossip_new_blockheight(const tal_t *ctx, u32 blockheight);
bool fromwire_gossip_new_blockheight(const void *p, u32 *blockheight);


#endif /* LIGHTNING_GOSSIPD_GEN_GOSSIP_WIRE_H */

