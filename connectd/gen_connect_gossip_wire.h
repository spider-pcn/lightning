/* This file was generated by generate-wire.py */
/* Do not modify this file! Modify the _csv file it was generated from. */
/* Original template can be found at tools/gen/header_template */

#ifndef LIGHTNING_CONNECTD_GEN_CONNECT_GOSSIP_WIRE_H
#define LIGHTNING_CONNECTD_GEN_CONNECT_GOSSIP_WIRE_H
#include <ccan/tal/tal.h>
#include <wire/tlvstream.h>
#include <wire/wire.h>
#include <common/per_peer_state.h>
#include <common/wireaddr.h>

enum connect_gossip_wire_type {
        /*  Communication between gossipd and connectd. */
        WIRE_GOSSIP_NEW_PEER = 4000,
        /*  if success: + gossip fd and gossip_store fd */
        WIRE_GOSSIP_NEW_PEER_REPLY = 4100,
        /*  Connectd asks gossipd for any known addresses for that node. */
        WIRE_GOSSIP_GET_ADDRS = 4001,
        WIRE_GOSSIP_GET_ADDRS_REPLY = 4101,
};

const char *connect_gossip_wire_type_name(int e);


/* WIRE: GOSSIP_NEW_PEER */
/*  Communication between gossipd and connectd. */
u8 *towire_gossip_new_peer(const tal_t *ctx, const struct node_id *id, bool gossip_queries_feature, bool initial_routing_sync);
bool fromwire_gossip_new_peer(const void *p, struct node_id *id, bool *gossip_queries_feature, bool *initial_routing_sync);

/* WIRE: GOSSIP_NEW_PEER_REPLY */
/*  if success: + gossip fd and gossip_store fd */
u8 *towire_gossip_new_peer_reply(const tal_t *ctx, bool success, const struct gossip_state *gs);
bool fromwire_gossip_new_peer_reply(const tal_t *ctx, const void *p, bool *success, struct gossip_state **gs);

/* WIRE: GOSSIP_GET_ADDRS */
/*  Connectd asks gossipd for any known addresses for that node. */
u8 *towire_gossip_get_addrs(const tal_t *ctx, const struct node_id *id);
bool fromwire_gossip_get_addrs(const void *p, struct node_id *id);

/* WIRE: GOSSIP_GET_ADDRS_REPLY */
u8 *towire_gossip_get_addrs_reply(const tal_t *ctx, const struct wireaddr *addrs);
bool fromwire_gossip_get_addrs_reply(const tal_t *ctx, const void *p, struct wireaddr **addrs);


#endif /* LIGHTNING_CONNECTD_GEN_CONNECT_GOSSIP_WIRE_H */

