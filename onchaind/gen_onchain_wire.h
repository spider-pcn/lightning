/* This file was generated by generate-wire.py */
/* Do not modify this file! Modify the _csv file it was generated from. */
/* Original template can be found at tools/gen/header_template */

#ifndef LIGHTNING_ONCHAIND_GEN_ONCHAIN_WIRE_H
#define LIGHTNING_ONCHAIND_GEN_ONCHAIN_WIRE_H
#include <ccan/tal/tal.h>
#include <wire/tlvstream.h>
#include <wire/wire.h>
#include <common/derive_basepoints.h>
#include <common/htlc_wire.h>
#include <common/wallet.h>
#include <onchaind/onchain_wire.h>

enum onchain_wire_type {
        /*  Begin!  Here's the onchain tx which spends funding tx */
        WIRE_ONCHAIN_INIT = 5001,
        /*  This is all the HTLCs: one per message */
        WIRE_ONCHAIN_HTLC = 5002,
        /*  This says we're ready; give us preimages. */
        WIRE_ONCHAIN_INIT_REPLY = 5101,
        /*  onchaind->master: Send out a tx. */
        WIRE_ONCHAIN_BROADCAST_TX = 5003,
        /*  master->onchaind: Notifier that an output has been spent by input_num of tx. */
        WIRE_ONCHAIN_SPENT = 5004,
        /*  master->onchaind: We will receive more than one of these */
        WIRE_ONCHAIN_DEPTH = 5005,
        /*  onchaind->master: We don't want to watch this tx */
        WIRE_ONCHAIN_UNWATCH_TX = 5006,
        /*  master->onchaind: We know HTLC preimage */
        WIRE_ONCHAIN_KNOWN_PREIMAGE = 5007,
        /*  onchaind->master: We discovered HTLC preimage */
        WIRE_ONCHAIN_EXTRACTED_PREIMAGE = 5008,
        /*  onchaind->master: this HTLC was missing from commit tx. */
        WIRE_ONCHAIN_MISSING_HTLC_OUTPUT = 5009,
        /*  onchaind->master: this HTLC has timed out (after reasonable_depth) */
        WIRE_ONCHAIN_HTLC_TIMEOUT = 5010,
        /*  onchaind->master: this peer can be forgotten */
        WIRE_ONCHAIN_ALL_IRREVOCABLY_RESOLVED = 5011,
        /*  onchaind->master: hey */
        WIRE_ONCHAIN_ADD_UTXO = 5012,
        /*  master -> onchaind: do you have a memleak? */
        WIRE_ONCHAIN_DEV_MEMLEAK = 5033,
        WIRE_ONCHAIN_DEV_MEMLEAK_REPLY = 5133,
        /*  Tell the main daemon what we've been watching */
        /*  that we tracked automatically but only onchaind knows how to classify their */
        /*  transactions. */
        WIRE_ONCHAIN_ANNOTATE_TXOUT = 5035,
        WIRE_ONCHAIN_ANNOTATE_TXIN = 5036,
};

const char *onchain_wire_type_name(int e);


/* WIRE: ONCHAIN_INIT */
/*  Begin!  Here's the onchain tx which spends funding tx */
u8 *towire_onchain_init(const tal_t *ctx, const struct shachain *shachain, const struct chainparams *chainparams, struct amount_sat funding_amount_satoshi, const struct pubkey *old_remote_per_commitment_point, const struct pubkey *remote_per_commitment_point, u32 local_to_self_delay, u32 remote_to_self_delay, u32 feerate_per_kw, struct amount_sat local_dust_limit_satoshi, const struct bitcoin_txid *our_broadcast_txid, const u8 *local_scriptpubkey, const u8 *remote_scriptpubkey, const struct pubkey *ourwallet_pubkey, enum side funder, const struct basepoints *local_basepoints, const struct basepoints *remote_basepoints, const struct bitcoin_tx *tx, u32 tx_blockheight, u32 reasonable_depth, const secp256k1_ecdsa_signature *htlc_signature, u64 num_htlcs, u32 min_possible_feerate, u32 max_possible_feerate, const struct pubkey *possible_remote_per_commit_point, bool option_static_remotekey);
bool fromwire_onchain_init(const tal_t *ctx, const void *p, struct shachain *shachain, const struct chainparams **chainparams, struct amount_sat *funding_amount_satoshi, struct pubkey *old_remote_per_commitment_point, struct pubkey *remote_per_commitment_point, u32 *local_to_self_delay, u32 *remote_to_self_delay, u32 *feerate_per_kw, struct amount_sat *local_dust_limit_satoshi, struct bitcoin_txid *our_broadcast_txid, u8 **local_scriptpubkey, u8 **remote_scriptpubkey, struct pubkey *ourwallet_pubkey, enum side *funder, struct basepoints *local_basepoints, struct basepoints *remote_basepoints, struct bitcoin_tx **tx, u32 *tx_blockheight, u32 *reasonable_depth, secp256k1_ecdsa_signature **htlc_signature, u64 *num_htlcs, u32 *min_possible_feerate, u32 *max_possible_feerate, struct pubkey **possible_remote_per_commit_point, bool *option_static_remotekey);

/* WIRE: ONCHAIN_HTLC */
/*  This is all the HTLCs: one per message */
u8 *towire_onchain_htlc(const tal_t *ctx, const struct htlc_stub *htlc, bool tell_if_missing, bool tell_immediately);
bool fromwire_onchain_htlc(const void *p, struct htlc_stub *htlc, bool *tell_if_missing, bool *tell_immediately);

/* WIRE: ONCHAIN_INIT_REPLY */
/*  This says we're ready; give us preimages. */
u8 *towire_onchain_init_reply(const tal_t *ctx);
bool fromwire_onchain_init_reply(const void *p);

/* WIRE: ONCHAIN_BROADCAST_TX */
/*  onchaind->master: Send out a tx. */
u8 *towire_onchain_broadcast_tx(const tal_t *ctx, const struct bitcoin_tx *tx, enum wallet_tx_type type);
bool fromwire_onchain_broadcast_tx(const tal_t *ctx, const void *p, struct bitcoin_tx **tx, enum wallet_tx_type *type);

/* WIRE: ONCHAIN_SPENT */
/*  master->onchaind: Notifier that an output has been spent by input_num of tx. */
u8 *towire_onchain_spent(const tal_t *ctx, const struct bitcoin_tx *tx, u32 input_num, u32 blockheight);
bool fromwire_onchain_spent(const tal_t *ctx, const void *p, struct bitcoin_tx **tx, u32 *input_num, u32 *blockheight);

/* WIRE: ONCHAIN_DEPTH */
/*  master->onchaind: We will receive more than one of these */
u8 *towire_onchain_depth(const tal_t *ctx, const struct bitcoin_txid *txid, u32 depth);
bool fromwire_onchain_depth(const void *p, struct bitcoin_txid *txid, u32 *depth);

/* WIRE: ONCHAIN_UNWATCH_TX */
/*  onchaind->master: We don't want to watch this tx */
u8 *towire_onchain_unwatch_tx(const tal_t *ctx, const struct bitcoin_txid *txid);
bool fromwire_onchain_unwatch_tx(const void *p, struct bitcoin_txid *txid);

/* WIRE: ONCHAIN_KNOWN_PREIMAGE */
/*  master->onchaind: We know HTLC preimage */
u8 *towire_onchain_known_preimage(const tal_t *ctx, const struct preimage *preimage);
bool fromwire_onchain_known_preimage(const void *p, struct preimage *preimage);

/* WIRE: ONCHAIN_EXTRACTED_PREIMAGE */
/*  onchaind->master: We discovered HTLC preimage */
u8 *towire_onchain_extracted_preimage(const tal_t *ctx, const struct preimage *preimage);
bool fromwire_onchain_extracted_preimage(const void *p, struct preimage *preimage);

/* WIRE: ONCHAIN_MISSING_HTLC_OUTPUT */
/*  onchaind->master: this HTLC was missing from commit tx. */
u8 *towire_onchain_missing_htlc_output(const tal_t *ctx, const struct htlc_stub *htlc);
bool fromwire_onchain_missing_htlc_output(const void *p, struct htlc_stub *htlc);

/* WIRE: ONCHAIN_HTLC_TIMEOUT */
/*  onchaind->master: this HTLC has timed out (after reasonable_depth) */
u8 *towire_onchain_htlc_timeout(const tal_t *ctx, const struct htlc_stub *htlc);
bool fromwire_onchain_htlc_timeout(const void *p, struct htlc_stub *htlc);

/* WIRE: ONCHAIN_ALL_IRREVOCABLY_RESOLVED */
/*  onchaind->master: this peer can be forgotten */
u8 *towire_onchain_all_irrevocably_resolved(const tal_t *ctx);
bool fromwire_onchain_all_irrevocably_resolved(const void *p);

/* WIRE: ONCHAIN_ADD_UTXO */
/*  onchaind->master: hey */
u8 *towire_onchain_add_utxo(const tal_t *ctx, const struct bitcoin_txid *prev_out_tx, u32 prev_out_index, const struct pubkey *per_commit_point, struct amount_sat value, u32 blockheight, const u8 *scriptpubkey);
bool fromwire_onchain_add_utxo(const tal_t *ctx, const void *p, struct bitcoin_txid *prev_out_tx, u32 *prev_out_index, struct pubkey **per_commit_point, struct amount_sat *value, u32 *blockheight, u8 **scriptpubkey);

/* WIRE: ONCHAIN_DEV_MEMLEAK */
/*  master -> onchaind: do you have a memleak? */
u8 *towire_onchain_dev_memleak(const tal_t *ctx);
bool fromwire_onchain_dev_memleak(const void *p);

/* WIRE: ONCHAIN_DEV_MEMLEAK_REPLY */
u8 *towire_onchain_dev_memleak_reply(const tal_t *ctx, bool leak);
bool fromwire_onchain_dev_memleak_reply(const void *p, bool *leak);

/* WIRE: ONCHAIN_ANNOTATE_TXOUT */
/*  Tell the main daemon what we've been watching */
/*  that we tracked automatically but only onchaind knows how to classify their */
/*  transactions. */
u8 *towire_onchain_annotate_txout(const tal_t *ctx, const struct bitcoin_txid *txid, u32 outnum, enum wallet_tx_type type);
bool fromwire_onchain_annotate_txout(const void *p, struct bitcoin_txid *txid, u32 *outnum, enum wallet_tx_type *type);

/* WIRE: ONCHAIN_ANNOTATE_TXIN */
u8 *towire_onchain_annotate_txin(const tal_t *ctx, const struct bitcoin_txid *txid, u32 innum, enum wallet_tx_type type);
bool fromwire_onchain_annotate_txin(const void *p, struct bitcoin_txid *txid, u32 *innum, enum wallet_tx_type *type);


#endif /* LIGHTNING_ONCHAIND_GEN_ONCHAIN_WIRE_H */

